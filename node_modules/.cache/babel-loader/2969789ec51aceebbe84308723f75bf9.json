{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ytaek.kim/dev/snc_vis/src/components/Explorer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { precisionPrefix } from 'd3';\nimport inside from 'point-in-polygon';\n\nconst Explorer = props => {\n  _s();\n\n  let jsonFileName = props.dataset + \"_\" + props.method;\n\n  let pointsData = require(\"../json/\" + jsonFileName + \"_points.json\");\n\n  let edgesData = require(\"../json/\" + jsonFileName + \"_edges.json\");\n\n  let missingPointsData = require(\"../json/\" + jsonFileName + \"_missing_points.json\");\n\n  console.log(edgesData);\n  pointsData = pointsData.map((d, i) => {\n    return {\n      coor: d.coor,\n      label: d.label,\n      idx: i\n    };\n  });\n  let knnData = edgesData.reduce(function (acc, val) {\n    if (val.start in acc) acc[val.start].push(val.end);else acc[val.start] = [val.end];\n    if (val.end in acc) acc[val.end].push(val.start);else acc[val.end] = [val.start];\n    return acc;\n  }, {});\n  console.log(pointsData, edgesData, missingPointsData, knnData, props);\n  const width = props.width;\n  const height = props.height;\n  const margin = {\n    hor: width / 20,\n    ver: height / 20\n  };\n  const [minX, maxX] = d3.extent(pointsData, d => d.coor[0]);\n  const [minY, maxY] = d3.extent(pointsData, d => d.coor[1]);\n  const xScale = d3.scaleLinear().domain([minX, maxX]).range([0, width]);\n  const yScale = d3.scaleLinear().domain([minY, maxY]).range([0, height]);\n  let svgs, svg, svgPoints, svgEdges, svgMissingEdges, svgContour, svgContourPoints;\n  let pointSelection;\n  const radius = props.radius;\n  const strokeWidth = props.stroke;\n  let colorScale = d3.scaleOrdinal(d3.schemeCategory10);\n  const isSelecting = useRef(false);\n  const isMakingContour = useRef(false);\n  const contour = useRef([]);\n\n  function pointsInPolygon(polygon) {\n    polygon = polygon.map(d => [xScale.invert(d[0] - margin.hor), yScale.invert(d[1] - margin.ver)]);\n    let pointsInPolygon = pointsData.reduce(function (acc, val, i) {\n      if (inside(val.coor, polygon)) acc.push(i);\n      return acc;\n    }, []);\n    return pointsInPolygon;\n  }\n\n  function getMissingEdgesInfo(missingPointsDict) {\n    let missingPointsList = Object.keys(missingPointsDict);\n    let edges = missingPointsList.reduce(function (acc, val) {\n      let adjacentPoints = knnData[val.toString()];\n      if (adjacentPoints === undefined) return acc;\n      adjacentPoints.forEach(adjacentPoint => {\n        if (parseInt(adjacentPoint) in missingPointsDict) {\n          let keyStr = parseInt(adjacentPoint) < val ? adjacentPoint + \"_\" + val.toString() : val.toString() + \"_\" + adjacentPoint;\n          acc.push(keyStr);\n        }\n      });\n      return acc;\n    }, []);\n    edges = Array.from(new Set(edges));\n    edges = edges.map(d => {\n      const incidentPoints = d.split(\"_\");\n      return [parseInt(incidentPoints[0]), parseInt(incidentPoints[1])];\n    });\n    return edges;\n  }\n\n  useEffect(() => {\n    console.log(\"CC useEffect...\");\n    d3.select(\"#ccSvg\").selectAll(\"g\").remove(); // svgs = d3.select(\"#scatterplot\" + props.dataset + props.method)\n\n    svgs = d3.select(\"#ccSvg\").attr(\"width\", width + margin.hor * 2).attr(\"height\", height + margin.ver * 2);\n    svg = svgs.append(\"g\").attr(\"id\", \"scatterplot_g\" + props.dataset + props.method).attr(\"transform\", \"translate(\" + margin.hor + \", \" + margin.ver + \")\");\n    svgEdges = svg.append(\"g\").attr(\"id\", \"edge_g\" + props.dataset + props.method);\n    svgContour = svg.append(\"g\").attr(\"id\", \"contour_g\" + props.dataset + props.method);\n    svgContourPoints = svg.append(\"g\").attr(\"id\", \"contour_point_g\" + props.dataset + props.method);\n\n    function renderMissingEdges(edges, missingPointsDict) {\n      svgMissingEdges.selectAll(\"path\").data(edges).enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke-width\", strokeWidth).attr(\"stroke\", \"red\").attr(\"d\", d => {\n        return d3.line().x(datum => xScale(pointsData[datum].coor[0])).y(datum => yScale(pointsData[datum].coor[1]))(d);\n      }).style(\"opacity\", d => {\n        return (missingPointsDict[d[0]] + missingPointsDict[d[1]]) / 2;\n      });\n    }\n\n    pointSelection = svg.append(\"rect\").attr(\"width\", width + margin.hor * 2).attr(\"height\", height + margin.ver * 2).attr(\"transform\", \"translate(-\" + margin.hor + \", -\" + margin.ver + \")\").style(\"fill-opacity\", 0).style(\"stroke\", \"black\").style(\"stroke-width\", 2).on(\"click\", function (event) {\n      if (!isSelecting.current) {\n        if (!isMakingContour.current) {\n          isMakingContour.current = true;\n          contour.current.push([event.offsetX, event.offsetY]);\n          svgContour.append(\"path\").attr(\"id\", \"current_path\").attr(\"fill\", \"none\").attr(\"stroke\", \"blue\").attr(\"storke-width\", 1).attr(\"stroke-dasharray\", \"2 \");\n        } else {\n          svgContour.select(\"#current_path\").attr(\"id\", \"\").attr(\"d\", () => {\n            let start, end;\n\n            if (Math.abs(event.offsetX - contour.current[0][0]) < 4 && Math.abs(event.offsetY - contour.current[0][1]) < 4) {\n              start = contour.current[contour.current.length - 1];\n              end = contour.current[0];\n              isSelecting.current = true;\n              isMakingContour.current = false; // finish making contour\n            } else {\n              contour.current.push([event.offsetX, event.offsetY]);\n              start = contour.current[contour.current.length - 2];\n              end = contour.current[contour.current.length - 1];\n              svgContour.append(\"path\").attr(\"id\", \"current_path\").attr(\"fill\", \"none\").attr(\"stroke\", \"blue\").attr(\"storke-width\", 1).attr(\"stroke-dasharray\", \"2 \");\n            }\n\n            return d3.line().x(datum => datum[0]).y(datum => datum[1])([[start[0] - margin.hor, start[1] - margin.ver], [end[0] - margin.hor, end[1] - margin.ver]]);\n          });\n\n          if (isSelecting.current) {\n            let points = pointsInPolygon(contour.current);\n            svgContourPoints.selectAll(\"circle\").data(points).enter().append(\"circle\").attr(\"r\", radius * 2).attr(\"cx\", d => xScale(pointsData[d].coor[0])).attr(\"cy\", d => yScale(pointsData[d].coor[1])).attr(\"fill\", \"blue\");\n            let missingPointsDict = points.reduce(function (acc, val) {\n              let currentDict = missingPointsData[val];\n              Object.keys(currentDict).forEach(key => {\n                if (key in acc) acc[key] += currentDict[key];else acc[key] = currentDict[key];\n              });\n              return acc;\n            }, {});\n            let listLen = points.length;\n            Object.keys(missingPointsDict).forEach(d => {\n              missingPointsDict[d] /= listLen;\n            });\n            let edges = getMissingEdgesInfo(missingPointsDict);\n            renderMissingEdges(edges, missingPointsDict);\n          }\n        }\n\n        if (isMakingContour.current) {\n          svgContour.append(\"circle\").attr(\"r\", 1.5).attr(\"cx\", event.offsetX - margin.hor).attr(\"cy\", event.offsetY - margin.ver).attr(\"fill\", \"none\").attr(\"stroke\", \"blue\").attr(\"stroke-width\", 1);\n        }\n      } else {\n        isSelecting.current = false;\n        contour.current = [];\n        svgContour.selectAll(\"path\").remove();\n        svgContour.selectAll(\"circle\").remove();\n        svgContourPoints.selectAll(\"circle\").remove();\n        svgMissingEdges.selectAll(\"path\").remove();\n      }\n    }).on(\"mousemove\", function (event) {\n      // console.log(event)\n      svgContour.select(\"#current_path\").attr(\"d\", () => {\n        let start = contour.current[contour.current.length - 1];\n        let end;\n        if (Math.abs(event.offsetX - contour.current[0][0]) < 4 && Math.abs(event.offsetY - contour.current[0][1]) < 4) end = contour.current[0];else end = [event.offsetX, event.offsetY];\n        return d3.line().x(datum => datum[0]).y(datum => datum[1])([[start[0] - margin.hor, start[1] - margin.ver], [end[0] - margin.hor, end[1] - margin.ver]]);\n      });\n    });\n    svgPoints = svg.append(\"g\").attr(\"id\", \"circle_g\" + props.dataset + props.method);\n    svgMissingEdges = svg.append(\"g\").attr(\"id\", \"missing_edge_g\" + props.dataset + props.method); // points\n\n    svgPoints.selectAll(\"circle\").data(pointsData).join(enter => {\n      enter.append(\"circle\").attr(\"class\", (d, i) => \"circle\" + i.toString()).attr(\"fill\", d => {\n        if (props.isLabel) return colorScale(d.label);else return \"black\";\n      }).attr(\"cx\", d => xScale(d.coor[0])).attr(\"cy\", d => yScale(d.coor[1])).style(\"opacity\", 0.8).attr(\"r\", radius); //  .on(\"mouseenter\", function() {\n      //      if(!isSelecting.current && !isMakingContour.current)\n      //         d3.select(this).attr(\"r\", radius * 3)\n      //  })\n      //  .on(\"mouseleave\", function() {\n      //      if(!isSelecting.current && !isMakingContour.current)\n      //         d3.select(this).attr(\"r\", radius)\n      //  })\n      //  .on(\"click\", function(e, d) {\n      //      if(!isSelecting.current && !isMakingContour.current){\n      //         isSelecting.current = true;\n      //         d3.select(this).attr(\"r\", radius * 5);\n      //         let missingPointsDict = missingPointsData[d.idx];\n      //         let edges = getMissingEdgesInfo(missingPointsDict)\n      //         renderMissingEdges(edges, missingPointsDict);\n      //      }\n      //  });\n    }); // edges\n\n    function scaleBivariate(first, second) {\n      let lScale = d3.scaleLinear().domain([0, 2]).range([100, 30]);\n      let aScale = d3.scaleLinear().domain([1, -1]).range([30, -30]);\n      let bScale = d3.scaleLinear().domain([1, -1]).range([20, -20]);\n      return d3.color(d3.lab(lScale(first + second), aScale(first - second), bScale(second - first)));\n    }\n\n    svgEdges.selectAll(\"path\").data(edgesData).join(enter => {\n      enter.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke-width\", strokeWidth).attr(\"opacity\", d => {\n        if (props.showMissing && !props.showFalse) return d.missing_val;\n        if (!props.showMissing && props.showFalse) return d.false_val;\n        if (props.showMissing && props.showFalse) return 1;\n      }).attr(\"stroke\", d => {\n        if (props.showMissing && props.showFalse) return scaleBivariate(d.false_val, d.missing_val);else return \"black\";\n      }).attr(\"d\", d => {\n        return d3.line().x(datum => xScale(pointsData[datum].coor[0])).y(datum => yScale(pointsData[datum].coor[1]))([d.start, d.end]);\n      });\n    });\n  }, [props.dataset, props.method]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"ccSvg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Explorer, \"QPIAxZHNG24cG3FWmzaT1KLlkOY=\");\n\n_c = Explorer;\nexport default Explorer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Explorer\");","map":{"version":3,"sources":["/Users/ytaek.kim/dev/snc_vis/src/components/Explorer.js"],"names":["React","useEffect","useRef","d3","precisionPrefix","inside","Explorer","props","jsonFileName","dataset","method","pointsData","require","edgesData","missingPointsData","console","log","map","d","i","coor","label","idx","knnData","reduce","acc","val","start","push","end","width","height","margin","hor","ver","minX","maxX","extent","minY","maxY","xScale","scaleLinear","domain","range","yScale","svgs","svg","svgPoints","svgEdges","svgMissingEdges","svgContour","svgContourPoints","pointSelection","radius","strokeWidth","stroke","colorScale","scaleOrdinal","schemeCategory10","isSelecting","isMakingContour","contour","pointsInPolygon","polygon","invert","getMissingEdgesInfo","missingPointsDict","missingPointsList","Object","keys","edges","adjacentPoints","toString","undefined","forEach","adjacentPoint","parseInt","keyStr","Array","from","Set","incidentPoints","split","select","selectAll","remove","attr","append","renderMissingEdges","data","enter","line","x","datum","y","style","on","event","current","offsetX","offsetY","Math","abs","length","points","currentDict","key","listLen","join","isLabel","scaleBivariate","first","second","lScale","aScale","bScale","color","lab","showMissing","showFalse","missing_val","false_val"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { precisionPrefix } from 'd3';\r\nimport inside from 'point-in-polygon'\r\n\r\nconst Explorer = (props) => {\r\n\r\n\r\n    let jsonFileName = props.dataset + \"_\" + props.method;\r\n    let pointsData = require(\"../json/\" + jsonFileName + \"_points.json\");\r\n    let edgesData = require(\"../json/\" + jsonFileName + \"_edges.json\");\r\n    let missingPointsData = require(\"../json/\" + jsonFileName + \"_missing_points.json\")\r\n\r\n\r\n    console.log(edgesData)\r\n\r\n    pointsData = pointsData.map((d, i) => {\r\n        return {\r\n            coor: d.coor,\r\n            label: d.label,\r\n            idx: i\r\n        };\r\n    });\r\n\r\n    let knnData = edgesData.reduce(function(acc, val) {\r\n        if (val.start in acc) acc[val.start].push(val.end);\r\n        else                  acc[val.start] = [val.end];\r\n        if (val.end in acc)   acc[val.end].push(val.start);\r\n        else                  acc[val.end] = [val.start];\r\n        return acc;\r\n    }, {})\r\n\r\n    console.log(pointsData, edgesData, missingPointsData, knnData, props) \r\n\r\n    const width = props.width;\r\n    const height = props.height;\r\n    const margin = { hor: width / 20, ver: height / 20 };\r\n\r\n    const [minX, maxX] = d3.extent(pointsData, d => d.coor[0]);\r\n    const [minY, maxY] = d3.extent(pointsData, d => d.coor[1]);\r\n\r\n    const xScale = d3.scaleLinear()\r\n                        .domain([minX, maxX])\r\n                        .range([0, width]);\r\n    \r\n    const yScale = d3.scaleLinear()\r\n                        .domain([minY, maxY])\r\n                        .range([0, height]);\r\n\r\n\r\n    let svgs, svg, svgPoints, svgEdges, svgMissingEdges, svgContour, svgContourPoints;\r\n    let pointSelection;\r\n\r\n    const radius = props.radius;\r\n    const strokeWidth = props.stroke;\r\n\r\n\r\n    let colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n\r\n    const isSelecting = useRef(false);\r\n    const isMakingContour = useRef(false);\r\n    const contour = useRef([]);\r\n\r\n\r\n    function pointsInPolygon(polygon) {\r\n        polygon = polygon.map(d => [xScale.invert(d[0] - margin.hor), yScale.invert(d[1] - margin.ver)]);\r\n        let pointsInPolygon = pointsData.reduce(function(acc, val, i){\r\n            if (inside(val.coor, polygon)) acc.push(i);\r\n            return acc;\r\n        }, []);\r\n        return pointsInPolygon;\r\n    }\r\n\r\n    function getMissingEdgesInfo(missingPointsDict) {\r\n        let missingPointsList = Object.keys(missingPointsDict);\r\n        let edges = missingPointsList.reduce(function(acc, val) {\r\n            let adjacentPoints = knnData[val.toString()]\r\n            if (adjacentPoints === undefined) return acc;\r\n            adjacentPoints.forEach(adjacentPoint => {\r\n                if(parseInt(adjacentPoint) in missingPointsDict) {\r\n                    let keyStr = parseInt(adjacentPoint) < val ? \r\n                                adjacentPoint  + \"_\" + val.toString() : \r\n                                val.toString() + \"_\" + adjacentPoint;\r\n                    acc.push(keyStr);\r\n                }\r\n            });\r\n            return acc;\r\n        }, []);\r\n        edges = Array.from(new Set(edges));\r\n        edges = edges.map(d => {\r\n            const incidentPoints = d.split(\"_\");\r\n            return [parseInt(incidentPoints[0]), parseInt(incidentPoints[1])];\r\n        })\r\n        return edges;\r\n    }\r\n\r\n    useEffect(() => {\r\nconsole.log(\"CC useEffect...\");\r\n        d3.select(\"#ccSvg\").selectAll(\"g\").remove();\r\n        // svgs = d3.select(\"#scatterplot\" + props.dataset + props.method)\r\n        svgs = d3.select(\"#ccSvg\")\r\n                .attr(\"width\", width + margin.hor * 2)\r\n                .attr(\"height\", height + margin.ver * 2)\r\n     \r\n        \r\n        svg = svgs.append(\"g\")\r\n                  .attr(\"id\", \"scatterplot_g\" + props.dataset + props.method)\r\n                  .attr(\"transform\", \"translate(\" + margin.hor + \", \" + margin.ver + \")\");\r\n\r\n\r\n        svgEdges = svg.append(\"g\")\r\n                      .attr(\"id\", \"edge_g\" + props.dataset + props.method);\r\n\r\n        \r\n        svgContour = svg.append(\"g\")\r\n                      .attr(\"id\", \"contour_g\" + props.dataset + props.method);\r\n\r\n        svgContourPoints = svg.append(\"g\")\r\n                              .attr(\"id\", \"contour_point_g\" + props.dataset + props.method);\r\n\r\n\r\n        function renderMissingEdges(edges, missingPointsDict) {\r\n            svgMissingEdges.selectAll(\"path\")\r\n                          .data(edges)\r\n                          .enter()\r\n                          .append(\"path\")\r\n                          .attr(\"fill\", \"none\")\r\n                          .attr(\"stroke-width\", strokeWidth)\r\n                          .attr(\"stroke\", \"red\")\r\n                          .attr(\"d\", d => {\r\n                              return d3.line()\r\n                                      .x(datum => xScale(pointsData[datum].coor[0]))\r\n                                      .y(datum => yScale(pointsData[datum].coor[1]))\r\n                                      (d);\r\n                          })\r\n                          .style(\"opacity\", d => {\r\n                              return (missingPointsDict[d[0]] + missingPointsDict[d[1]]) / 2\r\n                          });\r\n        }\r\n\r\n\r\n        pointSelection = svg.append(\"rect\")\r\n                            .attr(\"width\", width + margin.hor * 2)\r\n                            .attr(\"height\", height  + margin.ver * 2)\r\n                            .attr(\"transform\", \"translate(-\" + margin.hor + \", -\" + margin.ver + \")\")\r\n                            .style(\"fill-opacity\", 0)\r\n                            .style(\"stroke\", \"black\")\r\n                            .style(\"stroke-width\", 2)\r\n                            .on(\"click\", function(event) {\r\n                              if(!isSelecting.current) {\r\n                                    \r\n                                  if(!isMakingContour.current) {\r\n                                      isMakingContour.current = true;\r\n                                      contour.current.push([event.offsetX, event.offsetY])\r\n                                      svgContour.append(\"path\")\r\n                                                .attr(\"id\", \"current_path\")\r\n                                                .attr(\"fill\", \"none\")\r\n                                                .attr(\"stroke\", \"blue\")\r\n                                                .attr(\"storke-width\", 1)\r\n                                                .attr(\"stroke-dasharray\", \"2 \");\r\n                                  }\r\n                                  else {\r\n                                      svgContour.select(\"#current_path\")\r\n                                                .attr(\"id\", \"\")\r\n                                                .attr(\"d\", () => {\r\n                                                    let start, end;\r\n                                                    if (Math.abs(event.offsetX - contour.current[0][0]) < 4 &&\r\n                                                        Math.abs(event.offsetY - contour.current[0][1]) < 4) {\r\n                                                            start = contour.current[contour.current.length - 1];\r\n                                                            end = contour.current[0];\r\n                                                            isSelecting.current = true;\r\n                                                            isMakingContour.current = false; // finish making contour\r\n                                                        }\r\n                                                    else {\r\n                                                        contour.current.push([event.offsetX, event.offsetY])\r\n                                                        start = contour.current[contour.current.length - 2];\r\n                                                        end = contour.current[contour.current.length - 1];\r\n                                                        svgContour.append(\"path\")\r\n                                                                  .attr(\"id\", \"current_path\")\r\n                                                                  .attr(\"fill\", \"none\")\r\n                                                                  .attr(\"stroke\", \"blue\")\r\n                                                                  .attr(\"storke-width\", 1)\r\n                                                                  .attr(\"stroke-dasharray\", \"2 \");\r\n                                                    }\r\n                                                    \r\n                                                    return d3.line()\r\n                                                             .x(datum => datum[0])\r\n                                                             .y(datum => datum[1])\r\n                                                             ([[start[0] - margin.hor, start[1] - margin.ver],[end[0] - margin.hor, end[1] - margin.ver]])\r\n                                                })\r\n                                      \r\n\r\n                                      if(isSelecting.current) {\r\n                                          let points = pointsInPolygon(contour.current);\r\n                                          svgContourPoints.selectAll(\"circle\")\r\n                                                    .data(points)\r\n                                                    .enter()\r\n                                                    .append(\"circle\")\r\n                                                    .attr(\"r\", radius * 2)\r\n                                                    .attr(\"cx\", d => xScale(pointsData[d].coor[0]))\r\n                                                    .attr(\"cy\", d => yScale(pointsData[d].coor[1]))\r\n                                                    .attr(\"fill\", \"blue\");\r\n                                        \r\n                                          let missingPointsDict = points.reduce(function(acc, val) {\r\n                                              let currentDict = missingPointsData[val];\r\n                                              Object.keys(currentDict).forEach(key => {\r\n                                                  if (key in acc) acc[key] += currentDict[key];\r\n                                                  else            acc[key] =  currentDict[key];\r\n                                              });\r\n                                              return acc;\r\n                                          }, {})\r\n\r\n                                          let listLen = points.length;\r\n                                          Object.keys(missingPointsDict).forEach(d => {\r\n                                              missingPointsDict[d] /= listLen;\r\n                                          })\r\n                                          let edges = getMissingEdgesInfo(missingPointsDict);\r\n                                          renderMissingEdges(edges, missingPointsDict);\r\n                                      }\r\n                                      \r\n                                  }\r\n                                  if(isMakingContour.current){\r\n                                      svgContour.append(\"circle\")\r\n                                                .attr(\"r\", 1.5)\r\n                                                .attr(\"cx\", event.offsetX - margin.hor)\r\n                                                .attr(\"cy\", event.offsetY - margin.ver)\r\n                                                .attr(\"fill\", \"none\")\r\n                                                .attr(\"stroke\", \"blue\")\r\n                                                .attr(\"stroke-width\", 1);\r\n                                  }\r\n                              }\r\n                              else {\r\n                                  isSelecting.current = false;\r\n                                  contour.current = [];\r\n                                  svgContour.selectAll(\"path\").remove();\r\n                                  svgContour.selectAll(\"circle\").remove();\r\n                                  svgContourPoints.selectAll(\"circle\").remove();\r\n                                  svgMissingEdges.selectAll(\"path\").remove();\r\n                              }\r\n                            })\r\n                            .on(\"mousemove\", function(event) {\r\n                                // console.log(event)\r\n                                svgContour.select(\"#current_path\")\r\n                                          .attr(\"d\",() =>{\r\n                                              let start = contour.current[contour.current.length - 1]\r\n                                              let end;\r\n                                              if (Math.abs(event.offsetX - contour.current[0][0]) < 4 &&\r\n                                                  Math.abs(event.offsetY - contour.current[0][1]) < 4) \r\n                                                  end = contour.current[0];\r\n                                              else end = [event.offsetX, event.offsetY]\r\n                                              return d3.line()\r\n                                                       .x(datum => datum[0])\r\n                                                       .y(datum => datum[1])\r\n                                                       ([[start[0] - margin.hor, start[1] - margin.ver],[end[0] - margin.hor, end[1] - margin.ver]])\r\n\r\n                                          })\r\n                                \r\n                            })\r\n \r\n        \r\n\r\n\r\n        svgPoints = svg.append(\"g\")\r\n                    .attr(\"id\", \"circle_g\" + props.dataset + props.method);\r\n        \r\n        svgMissingEdges = svg.append(\"g\")\r\n                             .attr(\"id\", \"missing_edge_g\" + props.dataset + props.method);\r\n        \r\n\r\n        // points\r\n        svgPoints.selectAll(\"circle\")\r\n                         .data(pointsData)\r\n                         .join(\r\n                             enter => {\r\n                                 enter.append(\"circle\")\r\n                                     .attr(\"class\", (d,i) => \"circle\" + i.toString())\r\n                                     .attr(\"fill\", d => {\r\n                                         if (props.isLabel) return colorScale(d.label);\r\n                                         else return \"black\"; \r\n                                     })\r\n                                     .attr(\"cx\", d => xScale(d.coor[0]))\r\n                                     .attr(\"cy\", d => yScale(d.coor[1]))\r\n                                     .style(\"opacity\", 0.8)\r\n                                     .attr(\"r\", radius)\r\n                                    //  .on(\"mouseenter\", function() {\r\n                                    //      if(!isSelecting.current && !isMakingContour.current)\r\n                                    //         d3.select(this).attr(\"r\", radius * 3)\r\n                                    //  })\r\n                                    //  .on(\"mouseleave\", function() {\r\n                                    //      if(!isSelecting.current && !isMakingContour.current)\r\n                                    //         d3.select(this).attr(\"r\", radius)\r\n                                    //  })\r\n                                    //  .on(\"click\", function(e, d) {\r\n                                    //      if(!isSelecting.current && !isMakingContour.current){\r\n                                    //         isSelecting.current = true;\r\n                                    //         d3.select(this).attr(\"r\", radius * 5);\r\n                                    //         let missingPointsDict = missingPointsData[d.idx];\r\n                                    //         let edges = getMissingEdgesInfo(missingPointsDict)\r\n                                    //         renderMissingEdges(edges, missingPointsDict);\r\n                                    //      }\r\n                                    //  });\r\n                             }\r\n                         );\r\n        \r\n        // edges\r\n\r\n        function scaleBivariate(first, second) {\r\n            let lScale = d3.scaleLinear().domain([0, 2]).range([100, 30])\r\n            let aScale = d3.scaleLinear().domain([1, -1]).range([30, -30])\r\n            let bScale = d3.scaleLinear().domain([1, -1]).range([20, -20])\r\n\r\n            return d3.color(d3.lab(lScale(first + second), aScale(first - second), bScale(second-first)))\r\n        }\r\n\r\n\r\n        svgEdges.selectAll(\"path\")\r\n                .data(edgesData)\r\n                .join(\r\n                    enter => {\r\n                        enter.append(\"path\")\r\n                             .attr(\"fill\", \"none\")\r\n                             .attr(\"stroke-width\", strokeWidth)\r\n                             .attr(\"opacity\", d => {\r\n                                 if ( props.showMissing && !props.showFalse) return d.missing_val;\r\n                                 if (!props.showMissing &&  props.showFalse) return d.false_val;\r\n                                 if ( props.showMissing &&  props.showFalse) return 1;\r\n                             })\r\n                             .attr(\"stroke\", d => {\r\n                                 if (props.showMissing && props.showFalse) return scaleBivariate(d.false_val, d.missing_val);\r\n                                 else return \"black\";\r\n                             })\r\n                             .attr(\"d\", d => {\r\n                                return d3.line()\r\n                                         .x(datum => xScale(pointsData[datum].coor[0]))\r\n                                         .y(datum => yScale(pointsData[datum].coor[1]))\r\n                                         ([d.start, d.end])\r\n                             });\r\n                    }\r\n                )\r\n    }, [props.dataset, props.method]);\r\n   \r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <svg id={\"scatterplot\" + props.dataset + props.method}></svg> */}\r\n            <svg id={\"ccSvg\"}></svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Explorer;"]},"metadata":{},"sourceType":"module"}