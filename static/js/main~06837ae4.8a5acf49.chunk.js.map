{"version":3,"sources":["json sync /^/.//.*_edges/.json$","json sync /^/.//.*_missing_points/.json$","components/Checkviz.js","components/Explorer.js","App.js","index.js","json sync /^/.//.*_points/.json$"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Checkviz","props","pointsArray","jsonFileName","dataset","pointsData","require","d","i","coor","label","idx","cont","trust","svgs","svg","svgVoronoi","width","height","margin","d3","minX","maxX","minY","maxY","xScale","domain","range","yScale","radius","colorScale","useEffect","console","log","selectAll","remove","attr","append","method","voronoi","Delaunay","from","cellPolygon","voronoiCells","_","data","enter","first","second","powScale","exponent","aScale","bScale","scaleBivariate","x","datum","y","style","join","toString","isLabel","Explorer","edgesData","missingPointsData","knnData","reduce","acc","val","start","push","end","svgPoints","svgEdges","svgMissingEdges","svgContour","svgContourPoints","strokeWidth","stroke","isSelecting","useRef","isMakingContour","contour","on","event","current","select","Math","abs","offsetX","offsetY","length","points","polygon","invert","inside","missingPointsDict","currentDict","forEach","key","listLen","edges","renderMissingEdges","adjacentPoints","undefined","adjacentPoint","parseInt","keyStr","Array","Set","incidentPoints","split","getMissingEdgesInfo","showMissing","showFalse","missing_val","false_val","lScale","cursor","useStyles","makeStyles","theme","formControl","spacing","minWidth","selectEmpty","marginTop","App","classes","datasetList","displayModeList","useState","setDataset","displayMode","setDisplayMode","document","title","className","FormControl","variant","InputLabel","htmlFor","Select","native","defaultValue","value","onChange","target","inputProps","name","indexOf","axios","defaults","xsrfCookieName","xsrfHeaderName","ReactDOM","render","StrictMode","getElementById","reportWebVitals"],"mappings":"4w+iCAAA,IAAIA,EAAM,CACT,0BAA2B,IAC3B,0BAA2B,IAC3B,4BAA6B,IAC7B,yBAA0B,IAC1B,0BAA2B,IAC3B,0BAA2B,KAI5B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,qvujNC3BpB,IAAIH,EAAM,CACT,mCAAoC,GACpC,mCAAoC,GACpC,qCAAsC,GACtC,kCAAmC,GACnC,mCAAoC,GACpC,mCAAoC,IAIrC,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,8ICsILY,EA3JE,SAACC,GAId,IAEIC,EAFAC,EAAeF,EAAMG,QACrBC,EAAaC,MAAQ,KAAaH,EAAe,gBAKrDE,EAAaA,EAAWpB,KAAI,SAACsB,EAAGC,GAC5B,MAAO,CACHC,KAAMF,EAAEE,KACRC,MAAOH,EAAEG,MACTC,IAAKH,EACLI,KAAML,EAAEK,KACRC,MAAON,EAAEM,UAIjB,IAiBIC,EAAMC,EAAKC,EAjBTC,EAAQhB,EAAMgB,MACdC,EAASjB,EAAMiB,OACfC,EAAgB,EAAhBA,EAAwB,EAtBN,EAyBHC,IAAUf,GAAY,SAAAE,GAAC,OAAIA,EAAEE,KAAK,MAzB/B,mBAyBjBY,EAzBiB,KAyBXC,EAzBW,OA0BHF,IAAUf,GAAY,SAAAE,GAAC,OAAIA,EAAEE,KAAK,MA1B/B,mBA0BjBc,EA1BiB,KA0BXC,EA1BW,KA4BlBC,EAASL,MACMM,OAAO,CAACL,EAAMC,IACdK,MAAM,CAAC,EAAGV,IAEzBW,EAASR,MACMM,OAAO,CAACH,EAAMC,IACdG,MAAM,CAAC,EAAGT,IAKzBW,EAAS5B,EAAM4B,OAGjBC,EAAaV,IAAgBA,KAyGjC,OAvGAW,qBAAU,WACdC,QAAQC,IAAI,mBACJb,IAAU,UAAUc,UAAU,KAAKC,SAEnCrB,EAAOM,IAAU,UACRgB,KAAK,QAASnB,EAAqB,EAAbE,GACtBiB,KAAK,SAAUlB,EAAsB,EAAbC,GAGjCJ,EAAMD,EAAKuB,OAAO,KACPD,KAAK,KAAM,gBAAkBnC,EAAMG,QAAUH,EAAMqC,QACnDF,KAAK,YAAa,aAAejB,EAAa,KAAOA,EAAa,KAG7EH,EAAaD,EAAIsB,OAAO,KACPD,KAAK,KAAM,YAAcnC,EAAMG,QAAUH,EAAMqC,QAEhEN,QAAQC,IAAI5B,GAGZH,EAAcG,EAAWpB,KAAI,SAACsB,EAAGC,GAAJ,MAAU,CAACiB,EAAOlB,EAAEE,KAAK,IAAKmB,EAAOrB,EAAEE,KAAK,QACzEuB,QAAQC,IAAI/B,GACZ,IACMqC,EADWC,IAASC,KAAKvC,GACNqC,QAAQ,CAAC,EAAG,EAAG,IAAM,MAE9CP,QAAQC,IAAIM,EAAQG,YAAY,IAEhC,IAAMC,EAAezC,EAAYjB,KAAI,SAAC2D,EAAGpC,GAAJ,OAAU+B,EAAQG,YAAYlC,MAiBnEQ,EAAWkB,UAAU,QACVW,KAAKF,GACLG,QACAT,OAAO,QACPD,KAAK,QAAQ,SAAC7B,EAAGC,GACd,OApBd,SAAwBuC,EAAOC,GAE3B,IAEIC,EAAW7B,MAAc8B,SAAS,QAGlCC,GAFU/B,MAAiBM,OAAO,CAAC,EAAG,IAAIC,MAAM,EAAE,GAAI,MAC5CP,MAAiBM,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,GAAI,IAC5CP,MAAiBM,OAAO,CAAC,GAAI,IAAIC,MAAM,CAAC,IAAa,MAC9DyB,EAAShC,MAAiBM,OAAO,CAAC,GAAI,IAAIC,MAAM,CAAC,IAAa,KAIlE,OAAOP,IAASA,IAA4C,IAArC6B,EAAS,GAAKF,EAAQC,GAAU,GAAUG,EAAOJ,EAAQC,GAASI,EAAOJ,EAASD,KAQxFM,CAAe,EAAIhD,EAAWG,GAAGK,MAAO,EAAIR,EAAWG,GAAGI,SAEpEwB,KAAK,SAAS,GACdA,KAAK,KAAK,SAAA7B,GACP,OAAOa,MACGkC,GAAE,SAAAC,GAAK,OAAIA,EAAM,MACjBC,GAAE,SAAAD,GAAK,OAAIA,EAAM,KAFpBnC,CAGGb,MAKxBQ,EAAIsB,OAAO,QACPD,KAAK,QAASnB,EAAqB,EAAbE,GACtBiB,KAAK,SAAUlB,EAAuB,EAAbC,GACzBiB,KAAK,YAAa,cAAgBjB,EAAa,MAAQA,EAAa,KACpEsC,MAAM,eAAgB,GACtBA,MAAM,SAAU,SAChBA,MAAM,eAAgB,GAKd1C,EAAIsB,OAAO,KACVD,KAAK,KAAM,WAAanC,EAAMG,QAAUH,EAAMqC,QAKjDJ,UAAU,UACFW,KAAKxC,GACLqD,MACG,SAAAZ,GACIA,EAAMT,OAAO,UACRD,KAAK,SAAS,SAAC7B,EAAEC,GAAH,MAAS,SAAWA,EAAEmD,cACpCvB,KAAK,QAAQ,SAAA7B,GACV,OAAIN,EAAM2D,QAAgB9B,EAAWvB,EAAEG,OAC3B,WAEf0B,KAAK,MAAM,SAAA7B,GAAC,OAAIkB,EAAOlB,EAAEE,KAAK,OAC9B2B,KAAK,MAAM,SAAA7B,GAAC,OAAIqB,EAAOrB,EAAEE,KAAK,OAC9BgD,MAAM,UAAW,IACjBrB,KAAK,IAAKP,QAOzC,CAAC5B,EAAMG,QAASH,EAAMqC,SAMrB,8BAEI,qBAAKlD,GAAI,aC4MNyE,EAnWE,SAAC5D,GAId,IAAIE,EAAeF,EAAMG,QACrBC,EAAaC,MAAQ,KAAaH,EAAe,gBACjD2D,EAAYxD,OAAQ,KAAaH,EAAe,eAChD4D,EAAoBzD,OAAQ,KAAaH,EAAe,wBAG5D6B,QAAQC,IAAI6B,GAEZzD,EAAaA,EAAWpB,KAAI,SAACsB,EAAGC,GAC5B,MAAO,CACHC,KAAMF,EAAEE,KACRC,MAAOH,EAAEG,MACTC,IAAKH,MAIb,IAAIwD,EAAUF,EAAUG,QAAO,SAASC,EAAKC,GAKzC,OAJIA,EAAIC,SAASF,EAAKA,EAAIC,EAAIC,OAAOC,KAAKF,EAAIG,KACxBJ,EAAIC,EAAIC,OAAS,CAACD,EAAIG,KACxCH,EAAIG,OAAOJ,EAAOA,EAAIC,EAAIG,KAAKD,KAAKF,EAAIC,OACtBF,EAAIC,EAAIG,KAAO,CAACH,EAAIC,OACnCF,IACR,IAEHlC,QAAQC,IAAI5B,EAAYyD,EAAWC,EAAmBC,EAAS/D,GAE/D,IAiBIa,EAAMC,EAAKwD,EAAWC,EAAUC,EAAiBC,EAAYC,EAjB3D1D,EAAQhB,EAAMgB,MACdC,EAASjB,EAAMiB,OAEfC,EAAgB,EAAhBA,EAAwB,EAjCN,EAmCHC,IAAUf,GAAY,SAAAE,GAAC,OAAIA,EAAEE,KAAK,MAnC/B,mBAmCjBY,EAnCiB,KAmCXC,EAnCW,OAoCHF,IAAUf,GAAY,SAAAE,GAAC,OAAIA,EAAEE,KAAK,MApC/B,mBAoCjBc,EApCiB,KAoCXC,EApCW,KAsClBC,EAASL,MACMM,OAAO,CAACL,EAAMC,IACdK,MAAM,CAAC,EAAGV,IAEzBW,EAASR,MACMM,OAAO,CAACH,EAAMC,IACdG,MAAM,CAAC,EAAGT,IAMzBW,EAAS5B,EAAM4B,OACf+C,EAAc3E,EAAM4E,OAGtB/C,EAAaV,IAAgBA,KAG3B0D,EAAcC,kBAAO,GACrBC,EAAkBD,kBAAO,GACzBE,EAAUF,iBAAO,IA0RvB,OAvPAhD,qBAAU,WACdC,QAAQC,IAAI,mBACJb,IAAU,UAAUc,UAAU,KAAKC,SAEnCrB,EAAOM,IAAU,UACRgB,KAAK,QAASnB,EAAqB,EAAbE,GACtBiB,KAAK,SAAUlB,EAAsB,EAAbC,GAGjCJ,EAAMD,EAAKuB,OAAO,KACPD,KAAK,KAAM,gBAAkBnC,EAAMG,QAAUH,EAAMqC,QACnDF,KAAK,YAAa,aAAejB,EAAa,KAAOA,EAAa,KAG7EqD,EAAWzD,EAAIsB,OAAO,KACPD,KAAK,KAAM,SAAWnC,EAAMG,QAAUH,EAAMqC,QAG3DoC,EAAa3D,EAAIsB,OAAO,KACTD,KAAK,KAAM,YAAcnC,EAAMG,QAAUH,EAAMqC,QAE9DqC,EAAmB5D,EAAIsB,OAAO,KACPD,KAAK,KAAM,kBAAoBnC,EAAMG,QAAUH,EAAMqC,QAuB3DvB,EAAIsB,OAAO,QACPD,KAAK,QAASnB,EAAqB,EAAbE,GACtBiB,KAAK,SAAUlB,EAAuB,EAAbC,GACzBiB,KAAK,YAAa,cAAgBjB,EAAa,MAAQA,EAAa,KACpEsC,MAAM,eAAgB,GACtBA,MAAM,SAAU,SAChBA,MAAM,eAAgB,GACtByB,GAAG,SAAS,SAASC,GACpB,GAAIL,EAAYM,QAmFZN,EAAYM,SAAU,EACtBH,EAAQG,QAAU,GAClBV,EAAWxC,UAAU,QAAQC,SAC7BuC,EAAWxC,UAAU,UAAUC,SAC/BwC,EAAiBzC,UAAU,UAAUC,SACrCsC,EAAgBvC,UAAU,QAAQC,aAxFb,CAErB,GAAI6C,EAAgBI,SAyChB,GA9BAV,EAAWW,OAAO,iBACPjD,KAAK,KAAM,IACXA,KAAK,KAAK,WACP,IAAIgC,EAAOE,EAoBX,OAnBIgB,KAAKC,IAAIJ,EAAMK,QAAUP,EAAQG,QAAQ,GAAG,IAAM,GAClDE,KAAKC,IAAIJ,EAAMM,QAAUR,EAAQG,QAAQ,GAAG,IAAM,GAC9ChB,EAAQa,EAAQG,QAAQH,EAAQG,QAAQM,OAAS,GACjDpB,EAAMW,EAAQG,QAAQ,GACtBN,EAAYM,SAAU,EACtBJ,EAAgBI,SAAU,IAG9BH,EAAQG,QAAQf,KAAK,CAACc,EAAMK,QAASL,EAAMM,UAC3CrB,EAAQa,EAAQG,QAAQH,EAAQG,QAAQM,OAAS,GACjDpB,EAAMW,EAAQG,QAAQH,EAAQG,QAAQM,OAAS,GAC/ChB,EAAWrC,OAAO,QACPD,KAAK,KAAM,gBACXA,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBA,KAAK,mBAAoB,OAGjChB,MACGkC,GAAE,SAAAC,GAAK,OAAIA,EAAM,MACjBC,GAAE,SAAAD,GAAK,OAAIA,EAAM,KAFpBnC,CAGG,CAAC,CAACgD,EAAM,GAAKjD,EAAYiD,EAAM,GAAKjD,GAAY,CAACmD,EAAI,GAAKnD,EAAYmD,EAAI,GAAKnD,QAIpG2D,EAAYM,QAAS,CACpB,IAAIO,GAhItCC,GADqBA,EAiI0CX,EAAQG,SAhIrDnG,KAAI,SAAAsB,GAAC,MAAI,CAACkB,EAAOoE,OAAOtF,EAAE,GAAKY,GAAaS,EAAOiE,OAAOtF,EAAE,GAAKY,OAC7Dd,EAAW4D,QAAO,SAASC,EAAKC,EAAK3D,GAEvD,OADIsF,IAAO3B,EAAI1D,KAAMmF,IAAU1B,EAAIG,KAAK7D,GACjC0D,IACR,KA6H+BS,EAAiBzC,UAAU,UAChBW,KAAK8C,GACL7C,QACAT,OAAO,UACPD,KAAK,IAAc,EAATP,GACVO,KAAK,MAAM,SAAA7B,GAAC,OAAIkB,EAAOpB,EAAWE,GAAGE,KAAK,OAC1C2B,KAAK,MAAM,SAAA7B,GAAC,OAAIqB,EAAOvB,EAAWE,GAAGE,KAAK,OAC1C2B,KAAK,OAAQ,QAExB,IAAI2D,EAAoBJ,EAAO1B,QAAO,SAASC,EAAKC,GAChD,IAAI6B,EAAcjC,EAAkBI,GAKpC,OAJAvE,OAAOD,KAAKqG,GAAaC,SAAQ,SAAAC,GACzBA,KAAOhC,EAAKA,EAAIgC,IAAQF,EAAYE,GACxBhC,EAAIgC,GAAQF,EAAYE,MAErChC,IACR,IAECiC,EAAUR,EAAOD,OACrB9F,OAAOD,KAAKoG,GAAmBE,SAAQ,SAAA1F,GACnCwF,EAAkBxF,IAAM4F,KA7F9D,SAA4BC,EAAOL,GAC/BtB,EAAgBvC,UAAU,QACXW,KAAKuD,GACLtD,QACAT,OAAO,QACPD,KAAK,OAAQ,QACbA,KAAK,eAAgBwC,GACrBxC,KAAK,SAAU,OACfA,KAAK,KAAK,SAAA7B,GACP,OAAOa,MACEkC,GAAE,SAAAC,GAAK,OAAI9B,EAAOpB,EAAWkD,GAAO9C,KAAK,OACzC+C,GAAE,SAAAD,GAAK,OAAI3B,EAAOvB,EAAWkD,GAAO9C,KAAK,MAF3CW,CAGEb,MAEZkD,MAAM,WAAW,SAAAlD,GACd,OAAQwF,EAAkBxF,EAAE,IAAMwF,EAAkBxF,EAAE,KAAO,KAiFjD8F,CAhJtC,SAA6BN,GACzB,IACIK,EADoBxG,OAAOD,KAAKoG,GACN9B,QAAO,SAASC,EAAKC,GAC/C,IAAImC,EAAiBtC,EAAQG,EAAIR,YACjC,YAAuB4C,IAAnBD,GACJA,EAAeL,SAAQ,SAAAO,GACnB,GAAGC,SAASD,KAAkBT,EAAmB,CAC7C,IAAIW,EAASD,SAASD,GAAiBrC,EAC3BqC,EAAiB,IAAMrC,EAAIR,WAC3BQ,EAAIR,WAAa,IAAM6C,EACnCtC,EAAIG,KAAKqC,OANwBxC,IAU1C,IAMH,OALAkC,EAAQO,MAAMlE,KAAK,IAAImE,IAAIR,KACbnH,KAAI,SAAAsB,GACd,IAAMsG,EAAiBtG,EAAEuG,MAAM,KAC/B,MAAO,CAACL,SAASI,EAAe,IAAKJ,SAASI,EAAe,QA6HnBE,CAAoBhB,GACNA,SAjE9Bf,EAAgBI,SAAU,EAC1BH,EAAQG,QAAQf,KAAK,CAACc,EAAMK,QAASL,EAAMM,UAC3Cf,EAAWrC,OAAO,QACPD,KAAK,KAAM,gBACXA,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBA,KAAK,mBAAoB,MA8DrC4C,EAAgBI,SACfV,EAAWrC,OAAO,UACPD,KAAK,IAAK,KACVA,KAAK,KAAM+C,EAAMK,QAAUrE,GAC3BiB,KAAK,KAAM+C,EAAMM,QAAUtE,GAC3BiB,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GApKlE,IAAyBwD,KAgLAV,GAAG,aAAa,SAASC,GAEtBT,EAAWW,OAAO,iBACPjD,KAAK,KAAI,WACN,IACIkC,EADAF,EAAQa,EAAQG,QAAQH,EAAQG,QAAQM,OAAS,GAMrD,OAFIpB,EAFAgB,KAAKC,IAAIJ,EAAMK,QAAUP,EAAQG,QAAQ,GAAG,IAAM,GAClDE,KAAKC,IAAIJ,EAAMM,QAAUR,EAAQG,QAAQ,GAAG,IAAM,EAC5CH,EAAQG,QAAQ,GACf,CAACD,EAAMK,QAASL,EAAMM,SAC1BrE,MACGkC,GAAE,SAAAC,GAAK,OAAIA,EAAM,MACjBC,GAAE,SAAAD,GAAK,OAAIA,EAAM,KAFpBnC,CAGG,CAAC,CAACgD,EAAM,GAAKjD,EAAYiD,EAAM,GAAKjD,GAAY,CAACmD,EAAI,GAAKnD,EAAYmD,EAAI,GAAKnD,WAS/HoD,EAAYxD,EAAIsB,OAAO,KACVD,KAAK,KAAM,WAAanC,EAAMG,QAAUH,EAAMqC,QAE3DmC,EAAkB1D,EAAIsB,OAAO,KACPD,KAAK,KAAM,iBAAmBnC,EAAMG,QAAUH,EAAMqC,QAI1EiC,EAAUrC,UAAU,UACFW,KAAKxC,GACLqD,MACG,SAAAZ,GACIA,EAAMT,OAAO,UACRD,KAAK,SAAS,SAAC7B,EAAEC,GAAH,MAAS,SAAWA,EAAEmD,cACpCvB,KAAK,QAAQ,SAAA7B,GACV,OAAIN,EAAM2D,QAAgB9B,EAAWvB,EAAEG,OAC3B,WAEf0B,KAAK,MAAM,SAAA7B,GAAC,OAAIkB,EAAOlB,EAAEE,KAAK,OAC9B2B,KAAK,MAAM,SAAA7B,GAAC,OAAIqB,EAAOrB,EAAEE,KAAK,OAC9BgD,MAAM,UAAW,IACjBrB,KAAK,IAAKP,MAgCxC2C,EAAStC,UAAU,QACVW,KAAKiB,GACLJ,MACG,SAAAZ,GACIA,EAAMT,OAAO,QACPD,KAAK,OAAQ,QACbA,KAAK,eAAgBwC,GACrBxC,KAAK,WAAW,SAAA7B,GACb,OAAKN,EAAM+G,cAAgB/G,EAAMgH,UAAkB1G,EAAE2G,aAChDjH,EAAM+G,aAAgB/G,EAAMgH,UAAkB1G,EAAE4G,UAChDlH,EAAM+G,aAAgB/G,EAAMgH,UAAkB,OAAnD,KAEH7E,KAAK,UAAU,SAAA7B,GACZ,OAAIN,EAAM+G,aAAe/G,EAAMgH,UAtBxD,SAAwBlE,EAAOC,GAC3B,IAAIoE,EAAShG,MAAiBM,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,IAAK,KACrDwB,EAAS/B,MAAiBM,OAAO,CAAC,GAAI,IAAIC,MAAM,CAAC,IAAK,KACtDyB,EAAShC,MAAiBM,OAAO,CAAC,GAAI,IAAIC,MAAM,CAAC,IAAK,KAE1D,OAAOP,IAASA,IAAOgG,EAAOrE,EAAQC,GAASG,EAAOJ,EAAQC,GAASI,EAAOJ,EAAOD,KAiBfM,CAAe9C,EAAE4G,UAAW5G,EAAE2G,aACnE,WAEf9E,KAAK,KAAK,SAAA7B,GACR,OAAOa,MACGkC,GAAE,SAAAC,GAAK,OAAI9B,EAAOpB,EAAWkD,GAAO9C,KAAK,OACzC+C,GAAE,SAAAD,GAAK,OAAI3B,EAAOvB,EAAWkD,GAAO9C,KAAK,MAF5CW,CAGG,CAACb,EAAE6D,MAAO7D,EAAE+D,cAI/C,CAACrE,EAAMG,QAASH,EAAMqC,SAKrB,gCAEI,qBACIlD,GAAI,QACJqE,MAAO,CAAC4D,OAAO,eAEnB,kH,oCCtVNC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CACXtG,OAAQqG,EAAME,QAAQ,GACtBC,SAAU,KAEZC,YAAa,CACXC,UAAWL,EAAME,QAAQ,QAoMdI,EAhMH,SAAC7H,GACX,IAAM8H,EAAUT,IAGZU,EAAc,CAChB,YACA,aACA,aACA,aACA,aACA,gBAUEC,EAAkB,CACpB,CAAC,eAAgB,MACjB,CAAC,WAAY,MACb,CAAC,OAAQ,OAvBU,EAsCSC,mBAASF,EAAY,IAtC9B,mBAsCd5H,EAtCc,KAsCL+H,EAtCK,OAuCiBD,mBAASD,EAAgB,GAAG,IAvC7C,mBAuCdG,EAvCc,KAuCDC,EAvCC,KA6CrB,OAJAtG,qBAAU,WACRuG,SAASC,MAAQ,kBAIjB,sBAAKnJ,GAAG,cAAR,UACE,qBAAKA,GAAG,aAAR,SACE,qBAAKA,GAAG,YAAR,iGAEF,sBAAKoJ,UAAU,gBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,8BACE,eAACC,EAAA,EAAD,CAAaC,QAAQ,SAASF,UAAWT,EAAQN,YAAjD,UACE,cAACkB,EAAA,EAAD,CAAYC,QAAQ,2BAApB,qBACA,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,aAAc3I,EACd4I,MAAO5I,EACP6I,SAAU,SAAC9D,GAAD,OAAWgD,EAAWhD,EAAM+D,OAAOF,QAC7CG,WAAY,CACVC,KAAM,UACNhK,GAAI,4BAENqE,MAAO,CAAExC,MAAO,KATlB,SAWG+G,EAAY/I,KAAI,SAACsB,EAAGC,GAAJ,OACf,wBAAgBwI,MAAOzI,EAAvB,SACGA,GADUC,aA4CrB,8BACE,eAACiI,EAAA,EAAD,CAAaC,QAAQ,SAASF,UAAWT,EAAQN,YAAjD,UAEE,cAACkB,EAAA,EAAD,CAAYC,QAAQ,2BAApB,2BACA,cAACC,EAAA,EAAD,CACEC,QAAM,EACNE,MAAOZ,EACPa,SAAU,SAAC9D,GAAD,OAAWkD,EAAelD,EAAM+D,OAAOF,QACjDG,WAAY,CACVC,KAAM,MACNhK,GAAI,4BAENqE,MAAO,CAAExC,MAAO,KARlB,SAUGgH,EAAgBhJ,KAAI,SAACsB,EAAGC,GAAJ,OACnB,wBAAgBwI,MAAOzI,EAAE,GAAzB,SACGA,EAAE,IADQC,gBA0BvB,sBAAKgI,UAAU,WAAf,UACE,qBACEpJ,GAAG,KADL,SAMG,CAAC,KAAM,MAAMiK,QAAQjB,IAAgB,GACpC,cAAC,EAAD,CAEEhI,QAASA,EACTwD,QAvIE,KAwIFoD,aAvIM,EAwINC,WAvII,EAwIJpF,OAvIC,EAwIDgD,OAvIC,EAwID5D,MAvIA,IAwIAC,OAvIC,QA2IP,qBAAK9B,GAAG,YAAYqE,MAAO,CAAExC,MAAO,SACpC,qBAAK7B,GAAG,KAAR,SACG,CAAC,KAAM,MAAMiK,QAAQjB,IAAgB,GACpC,cAAC,EAAD,CAEEhI,QAASA,EACTwD,QAvJE,KAwJF/B,OArJC,EAsJDZ,MApJA,IAqJAC,OApJC,kB,0BChDjBoI,IAAMC,SAASC,eAAiB,YAChCF,IAAMC,SAASE,eAAiB,cAEhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BC,e,mBCpBA,IAAI7K,EAAM,CACT,mCAAoC,GACpC,2BAA4B,IAC5B,mCAAoC,GACpC,2BAA4B,IAC5B,qCAAsC,GACtC,6BAA8B,IAC9B,kCAAmC,GACnC,0BAA2B,IAC3B,mCAAoC,GACpC,2BAA4B,IAC5B,mCAAoC,GACpC,2BAA4B,KAI7B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I","file":"static/js/main~06837ae4.8a5acf49.chunk.js","sourcesContent":["var map = {\n\t\"./fmnist_pca_edges.json\": 239,\n\t\"./kmnist_pca_edges.json\": 240,\n\t\"./mnist_isomap_edges.json\": 241,\n\t\"./mnist_pca_edges.json\": 242,\n\t\"./mnist_tsne_edges.json\": 243,\n\t\"./mnist_umap_edges.json\": 244\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 238;","var map = {\n\t\"./fmnist_pca_missing_points.json\": 88,\n\t\"./kmnist_pca_missing_points.json\": 89,\n\t\"./mnist_isomap_missing_points.json\": 90,\n\t\"./mnist_pca_missing_points.json\": 91,\n\t\"./mnist_tsne_missing_points.json\": 92,\n\t\"./mnist_umap_missing_points.json\": 93\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 245;","import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { precisionPrefix } from 'd3';\r\nimport inside from 'point-in-polygon';\r\nimport {Delaunay} from \"d3-delaunay\";\r\n\r\nconst Checkviz = (props) => {\r\n\r\n\r\n    // let jsonFileName = props.dataset + \"_\" + props.method;\r\n    let jsonFileName = props.dataset;\r\n    let pointsData = require(\"../json/\" + jsonFileName + \"_points.json\");\r\n    let pointsArray;\r\n\r\n\r\n\r\n    pointsData = pointsData.map((d, i) => {\r\n        return {\r\n            coor: d.coor,\r\n            label: d.label,\r\n            idx: i,\r\n            cont: d.cont,\r\n            trust: d.trust\r\n        };\r\n    });\r\n    \r\n    const width = props.width;\r\n    const height = props.height;\r\n    const margin = { hor: 0, ver: 0 };\r\n    // const margin = { hor: width / 20, ver: height / 20 };\r\n\r\n    const [minX, maxX] = d3.extent(pointsData, d => d.coor[0]);\r\n    const [minY, maxY] = d3.extent(pointsData, d => d.coor[1]);\r\n\r\n    const xScale = d3.scaleLinear()\r\n                        .domain([minX, maxX])\r\n                        .range([0, width]);\r\n    \r\n    const yScale = d3.scaleLinear()\r\n                        .domain([minY, maxY])\r\n                        .range([0, height]);\r\n\r\n\r\n    let svgs, svg, svgVoronoi, svgPoints;\r\n\r\n    const radius = props.radius;\r\n\r\n\r\n    let colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n    useEffect(() => {\r\nconsole.log(\"CV useEffect...\");\r\n        d3.select(\"#cvSvg\").selectAll(\"g\").remove();\r\n        // svgs = d3.select(\"#scatterplot\" + props.dataset + props.method)\r\n        svgs = d3.select(\"#cvSvg\")\r\n                .attr(\"width\", width + margin.hor * 2)\r\n                .attr(\"height\", height + margin.ver * 2)\r\n     \r\n        \r\n        svg = svgs.append(\"g\")\r\n                  .attr(\"id\", \"scatterplot_g\" + props.dataset + props.method)\r\n                  .attr(\"transform\", \"translate(\" + margin.hor + \", \" + margin.ver + \")\");\r\n        \r\n\r\n        svgVoronoi = svg.append(\"g\")\r\n                        .attr(\"id\", \"voronoi_g\" + props.dataset + props.method);\r\n\r\n        console.log(pointsData)\r\n\r\n\r\n        pointsArray = pointsData.map((d, i) => [xScale(d.coor[0]), yScale(d.coor[1])])\r\n        console.log(pointsArray)\r\n        const delaunay = Delaunay.from(pointsArray);\r\n        const voronoi = delaunay.voronoi([0, 0, 1000, 1000]);\r\n\r\n        console.log(voronoi.cellPolygon(2));\r\n\r\n        const voronoiCells = pointsArray.map((_, i) => voronoi.cellPolygon(i));\r\n\r\n        function scaleBivariate(first, second) {\r\n\r\n            let cScale = 1.3\r\n            \r\n            let powScale = d3.scalePow().exponent(1.5145);\r\n            let lScale1 = d3.scaleLinear().domain([0, 2]).range([-20, 100])\r\n            let lScale2 = d3.scaleLinear().domain([1, 2]).range([35, 0])\r\n            let aScale = d3.scaleLinear().domain([1, -1]).range([30 * cScale, -30 * cScale])  //30\r\n            let bScale = d3.scaleLinear().domain([1, -1]).range([20 * cScale, -20 * cScale])  // 20   \r\n            let lScale;\r\n\r\n\r\n            return d3.color(d3.lab(powScale(1 - (first + second) / 2) * 100, aScale(first - second), bScale(second - first)))\r\n        }\r\n        \r\n        svgVoronoi.selectAll(\"path\")\r\n                  .data(voronoiCells)\r\n                  .enter()\r\n                  .append(\"path\")\r\n                  .attr(\"fill\", (d, i) => {\r\n                      return scaleBivariate(1 - pointsData[i].trust, 1 - pointsData[i].cont)\r\n                  })\r\n                  .attr(\"stroke\",0)\r\n                  .attr(\"d\", d => {\r\n                      return d3.line()\r\n                               .x(datum => datum[0])\r\n                               .y(datum => datum[1])\r\n                               (d);\r\n                  })\r\n\r\n\r\n\r\n        svg.append(\"rect\")\r\n           .attr(\"width\", width + margin.hor * 2)\r\n           .attr(\"height\", height  + margin.ver * 2)\r\n           .attr(\"transform\", \"translate(-\" + margin.hor + \", -\" + margin.ver + \")\")\r\n           .style(\"fill-opacity\", 0)\r\n           .style(\"stroke\", \"black\")\r\n           .style(\"stroke-width\", 2)\r\n                         \r\n \r\n        \r\n\r\n        svgPoints = svg.append(\"g\")\r\n                    .attr(\"id\", \"circle_g\" + props.dataset + props.method);\r\n        \r\n        \r\n\r\n        // points\r\n        svgPoints.selectAll(\"circle\")\r\n                         .data(pointsData)\r\n                         .join(\r\n                             enter => {\r\n                                 enter.append(\"circle\")\r\n                                     .attr(\"class\", (d,i) => \"circle\" + i.toString())\r\n                                     .attr(\"fill\", d => {\r\n                                         if (props.isLabel) return colorScale(d.label);\r\n                                         else return \"black\"; \r\n                                     })\r\n                                     .attr(\"cx\", d => xScale(d.coor[0]))\r\n                                     .attr(\"cy\", d => yScale(d.coor[1]))\r\n                                     .style(\"opacity\", 0.8)\r\n                                     .attr(\"r\", radius);\r\n                         });\r\n        \r\n        // edges\r\n\r\n        \r\n\r\n    }, [props.dataset, props.method]);\r\n\r\n   \r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <svg id={\"scatterplot\" + props.dataset + props.method}></svg> */}\r\n            <svg id={\"cvSvg\"}></svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkviz;","import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { precisionPrefix } from 'd3';\r\nimport inside from 'point-in-polygon'\r\n\r\nconst Explorer = (props) => {\r\n\r\n\r\n    // let jsonFileName = props.dataset + \"_\" + props.method;\r\n    let jsonFileName = props.dataset;\r\n    let pointsData = require(\"../json/\" + jsonFileName + \"_points.json\");\r\n    let edgesData = require(\"../json/\" + jsonFileName + \"_edges.json\");\r\n    let missingPointsData = require(\"../json/\" + jsonFileName + \"_missing_points.json\")\r\n\r\n\r\n    console.log(edgesData)\r\n\r\n    pointsData = pointsData.map((d, i) => {\r\n        return {\r\n            coor: d.coor,\r\n            label: d.label,\r\n            idx: i\r\n        };\r\n    });\r\n\r\n    let knnData = edgesData.reduce(function(acc, val) {\r\n        if (val.start in acc) acc[val.start].push(val.end);\r\n        else                  acc[val.start] = [val.end];\r\n        if (val.end in acc)   acc[val.end].push(val.start);\r\n        else                  acc[val.end] = [val.start];\r\n        return acc;\r\n    }, {})\r\n\r\n    console.log(pointsData, edgesData, missingPointsData, knnData, props) \r\n\r\n    const width = props.width;\r\n    const height = props.height;\r\n    // const margin = { hor: width / 20, ver: height / 20 };\r\n    const margin = { hor: 0, ver: 0 };\r\n\r\n    const [minX, maxX] = d3.extent(pointsData, d => d.coor[0]);\r\n    const [minY, maxY] = d3.extent(pointsData, d => d.coor[1]);\r\n\r\n    const xScale = d3.scaleLinear()\r\n                        .domain([minX, maxX])\r\n                        .range([0, width]);\r\n    \r\n    const yScale = d3.scaleLinear()\r\n                        .domain([minY, maxY])\r\n                        .range([0, height]);\r\n\r\n\r\n    let svgs, svg, svgPoints, svgEdges, svgMissingEdges, svgContour, svgContourPoints;\r\n    let pointSelection;\r\n\r\n    const radius = props.radius;\r\n    const strokeWidth = props.stroke;\r\n\r\n\r\n    let colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n\r\n    const isSelecting = useRef(false);\r\n    const isMakingContour = useRef(false);\r\n    const contour = useRef([]);\r\n\r\n\r\n    function pointsInPolygon(polygon) {\r\n        polygon = polygon.map(d => [xScale.invert(d[0] - margin.hor), yScale.invert(d[1] - margin.ver)]);\r\n        let pointsInPolygon = pointsData.reduce(function(acc, val, i){\r\n            if (inside(val.coor, polygon)) acc.push(i);\r\n            return acc;\r\n        }, []);\r\n        return pointsInPolygon;\r\n    }\r\n\r\n    function getMissingEdgesInfo(missingPointsDict) {\r\n        let missingPointsList = Object.keys(missingPointsDict);\r\n        let edges = missingPointsList.reduce(function(acc, val) {\r\n            let adjacentPoints = knnData[val.toString()]\r\n            if (adjacentPoints === undefined) return acc;\r\n            adjacentPoints.forEach(adjacentPoint => {\r\n                if(parseInt(adjacentPoint) in missingPointsDict) {\r\n                    let keyStr = parseInt(adjacentPoint) < val ? \r\n                                adjacentPoint  + \"_\" + val.toString() : \r\n                                val.toString() + \"_\" + adjacentPoint;\r\n                    acc.push(keyStr);\r\n                }\r\n            });\r\n            return acc;\r\n        }, []);\r\n        edges = Array.from(new Set(edges));\r\n        edges = edges.map(d => {\r\n            const incidentPoints = d.split(\"_\");\r\n            return [parseInt(incidentPoints[0]), parseInt(incidentPoints[1])];\r\n        })\r\n        return edges;\r\n    }\r\n\r\n    useEffect(() => {\r\nconsole.log(\"CC useEffect...\");\r\n        d3.select(\"#ccSvg\").selectAll(\"g\").remove();\r\n        // svgs = d3.select(\"#scatterplot\" + props.dataset + props.method)\r\n        svgs = d3.select(\"#ccSvg\")\r\n                .attr(\"width\", width + margin.hor * 2)\r\n                .attr(\"height\", height + margin.ver * 2)\r\n     \r\n        \r\n        svg = svgs.append(\"g\")\r\n                  .attr(\"id\", \"scatterplot_g\" + props.dataset + props.method)\r\n                  .attr(\"transform\", \"translate(\" + margin.hor + \", \" + margin.ver + \")\");\r\n\r\n\r\n        svgEdges = svg.append(\"g\")\r\n                      .attr(\"id\", \"edge_g\" + props.dataset + props.method);\r\n\r\n        \r\n        svgContour = svg.append(\"g\")\r\n                      .attr(\"id\", \"contour_g\" + props.dataset + props.method);\r\n\r\n        svgContourPoints = svg.append(\"g\")\r\n                              .attr(\"id\", \"contour_point_g\" + props.dataset + props.method);\r\n\r\n\r\n        function renderMissingEdges(edges, missingPointsDict) {\r\n            svgMissingEdges.selectAll(\"path\")\r\n                          .data(edges)\r\n                          .enter()\r\n                          .append(\"path\")\r\n                          .attr(\"fill\", \"none\")\r\n                          .attr(\"stroke-width\", strokeWidth)\r\n                          .attr(\"stroke\", \"red\")\r\n                          .attr(\"d\", d => {\r\n                              return d3.line()\r\n                                      .x(datum => xScale(pointsData[datum].coor[0]))\r\n                                      .y(datum => yScale(pointsData[datum].coor[1]))\r\n                                      (d);\r\n                          })\r\n                          .style(\"opacity\", d => {\r\n                              return (missingPointsDict[d[0]] + missingPointsDict[d[1]]) / 2\r\n                          });\r\n        }\r\n\r\n\r\n        pointSelection = svg.append(\"rect\")\r\n                            .attr(\"width\", width + margin.hor * 2)\r\n                            .attr(\"height\", height  + margin.ver * 2)\r\n                            .attr(\"transform\", \"translate(-\" + margin.hor + \", -\" + margin.ver + \")\")\r\n                            .style(\"fill-opacity\", 0)\r\n                            .style(\"stroke\", \"black\")\r\n                            .style(\"stroke-width\", 2)\r\n                            .on(\"click\", function(event) {\r\n                              if(!isSelecting.current) {\r\n                                    \r\n                                  if(!isMakingContour.current) {\r\n                                      isMakingContour.current = true;\r\n                                      contour.current.push([event.offsetX, event.offsetY])\r\n                                      svgContour.append(\"path\")\r\n                                                .attr(\"id\", \"current_path\")\r\n                                                .attr(\"fill\", \"none\")\r\n                                                .attr(\"stroke\", \"blue\")\r\n                                                .attr(\"storke-width\", 1)\r\n                                                .attr(\"stroke-dasharray\", \"2 \");\r\n                                  }\r\n                                  else {\r\n                                      svgContour.select(\"#current_path\")\r\n                                                .attr(\"id\", \"\")\r\n                                                .attr(\"d\", () => {\r\n                                                    let start, end;\r\n                                                    if (Math.abs(event.offsetX - contour.current[0][0]) < 4 &&\r\n                                                        Math.abs(event.offsetY - contour.current[0][1]) < 4) {\r\n                                                            start = contour.current[contour.current.length - 1];\r\n                                                            end = contour.current[0];\r\n                                                            isSelecting.current = true;\r\n                                                            isMakingContour.current = false; // finish making contour\r\n                                                        }\r\n                                                    else {\r\n                                                        contour.current.push([event.offsetX, event.offsetY])\r\n                                                        start = contour.current[contour.current.length - 2];\r\n                                                        end = contour.current[contour.current.length - 1];\r\n                                                        svgContour.append(\"path\")\r\n                                                                  .attr(\"id\", \"current_path\")\r\n                                                                  .attr(\"fill\", \"none\")\r\n                                                                  .attr(\"stroke\", \"blue\")\r\n                                                                  .attr(\"storke-width\", 1)\r\n                                                                  .attr(\"stroke-dasharray\", \"2 \");\r\n                                                    }\r\n                                                    \r\n                                                    return d3.line()\r\n                                                             .x(datum => datum[0])\r\n                                                             .y(datum => datum[1])\r\n                                                             ([[start[0] - margin.hor, start[1] - margin.ver],[end[0] - margin.hor, end[1] - margin.ver]])\r\n                                                })\r\n                                      \r\n\r\n                                      if(isSelecting.current) {\r\n                                          let points = pointsInPolygon(contour.current);\r\n                                          svgContourPoints.selectAll(\"circle\")\r\n                                                    .data(points)\r\n                                                    .enter()\r\n                                                    .append(\"circle\")\r\n                                                    .attr(\"r\", radius * 2)\r\n                                                    .attr(\"cx\", d => xScale(pointsData[d].coor[0]))\r\n                                                    .attr(\"cy\", d => yScale(pointsData[d].coor[1]))\r\n                                                    .attr(\"fill\", \"blue\");\r\n                                        \r\n                                          let missingPointsDict = points.reduce(function(acc, val) {\r\n                                              let currentDict = missingPointsData[val];\r\n                                              Object.keys(currentDict).forEach(key => {\r\n                                                  if (key in acc) acc[key] += currentDict[key];\r\n                                                  else            acc[key] =  currentDict[key];\r\n                                              });\r\n                                              return acc;\r\n                                          }, {})\r\n\r\n                                          let listLen = points.length;\r\n                                          Object.keys(missingPointsDict).forEach(d => {\r\n                                              missingPointsDict[d] /= listLen;\r\n                                          })\r\n                                          let edges = getMissingEdgesInfo(missingPointsDict);\r\n                                          renderMissingEdges(edges, missingPointsDict);\r\n                                      }\r\n                                      \r\n                                  }\r\n                                  if(isMakingContour.current){\r\n                                      svgContour.append(\"circle\")\r\n                                                .attr(\"r\", 1.5)\r\n                                                .attr(\"cx\", event.offsetX - margin.hor)\r\n                                                .attr(\"cy\", event.offsetY - margin.ver)\r\n                                                .attr(\"fill\", \"none\")\r\n                                                .attr(\"stroke\", \"blue\")\r\n                                                .attr(\"stroke-width\", 1);\r\n                                  }\r\n                              }\r\n                              else {\r\n                                  isSelecting.current = false;\r\n                                  contour.current = [];\r\n                                  svgContour.selectAll(\"path\").remove();\r\n                                  svgContour.selectAll(\"circle\").remove();\r\n                                  svgContourPoints.selectAll(\"circle\").remove();\r\n                                  svgMissingEdges.selectAll(\"path\").remove();\r\n                              }\r\n                            })\r\n                            .on(\"mousemove\", function(event) {\r\n                                // console.log(event)\r\n                                svgContour.select(\"#current_path\")\r\n                                          .attr(\"d\",() =>{\r\n                                              let start = contour.current[contour.current.length - 1]\r\n                                              let end;\r\n                                              if (Math.abs(event.offsetX - contour.current[0][0]) < 4 &&\r\n                                                  Math.abs(event.offsetY - contour.current[0][1]) < 4) \r\n                                                  end = contour.current[0];\r\n                                              else end = [event.offsetX, event.offsetY]\r\n                                              return d3.line()\r\n                                                       .x(datum => datum[0])\r\n                                                       .y(datum => datum[1])\r\n                                                       ([[start[0] - margin.hor, start[1] - margin.ver],[end[0] - margin.hor, end[1] - margin.ver]])\r\n\r\n                                          })\r\n                                \r\n                            })\r\n \r\n        \r\n\r\n\r\n        svgPoints = svg.append(\"g\")\r\n                    .attr(\"id\", \"circle_g\" + props.dataset + props.method);\r\n        \r\n        svgMissingEdges = svg.append(\"g\")\r\n                             .attr(\"id\", \"missing_edge_g\" + props.dataset + props.method);\r\n        \r\n\r\n        // points\r\n        svgPoints.selectAll(\"circle\")\r\n                         .data(pointsData)\r\n                         .join(\r\n                             enter => {\r\n                                 enter.append(\"circle\")\r\n                                     .attr(\"class\", (d,i) => \"circle\" + i.toString())\r\n                                     .attr(\"fill\", d => {\r\n                                         if (props.isLabel) return colorScale(d.label);\r\n                                         else return \"black\"; \r\n                                     })\r\n                                     .attr(\"cx\", d => xScale(d.coor[0]))\r\n                                     .attr(\"cy\", d => yScale(d.coor[1]))\r\n                                     .style(\"opacity\", 0.8)\r\n                                     .attr(\"r\", radius)\r\n                                    //  .on(\"mouseenter\", function() {\r\n                                    //      if(!isSelecting.current && !isMakingContour.current)\r\n                                    //         d3.select(this).attr(\"r\", radius * 3)\r\n                                    //  })\r\n                                    //  .on(\"mouseleave\", function() {\r\n                                    //      if(!isSelecting.current && !isMakingContour.current)\r\n                                    //         d3.select(this).attr(\"r\", radius)\r\n                                    //  })\r\n                                    //  .on(\"click\", function(e, d) {\r\n                                    //      if(!isSelecting.current && !isMakingContour.current){\r\n                                    //         isSelecting.current = true;\r\n                                    //         d3.select(this).attr(\"r\", radius * 5);\r\n                                    //         let missingPointsDict = missingPointsData[d.idx];\r\n                                    //         let edges = getMissingEdgesInfo(missingPointsDict)\r\n                                    //         renderMissingEdges(edges, missingPointsDict);\r\n                                    //      }\r\n                                    //  });\r\n                             }\r\n                         );\r\n        \r\n        // edges\r\n\r\n        function scaleBivariate(first, second) {\r\n            let lScale = d3.scaleLinear().domain([0, 2]).range([100, 30])\r\n            let aScale = d3.scaleLinear().domain([1, -1]).range([30, -30])\r\n            let bScale = d3.scaleLinear().domain([1, -1]).range([20, -20])\r\n\r\n            return d3.color(d3.lab(lScale(first + second), aScale(first - second), bScale(second-first)))\r\n        }\r\n\r\n\r\n        svgEdges.selectAll(\"path\")\r\n                .data(edgesData)\r\n                .join(\r\n                    enter => {\r\n                        enter.append(\"path\")\r\n                             .attr(\"fill\", \"none\")\r\n                             .attr(\"stroke-width\", strokeWidth)\r\n                             .attr(\"opacity\", d => {\r\n                                 if ( props.showMissing && !props.showFalse) return d.missing_val;\r\n                                 if (!props.showMissing &&  props.showFalse) return d.false_val;\r\n                                 if ( props.showMissing &&  props.showFalse) return 1;\r\n                             })\r\n                             .attr(\"stroke\", d => {\r\n                                 if (props.showMissing && props.showFalse) return scaleBivariate(d.false_val, d.missing_val);\r\n                                 else return \"black\";\r\n                             })\r\n                             .attr(\"d\", d => {\r\n                                return d3.line()\r\n                                         .x(datum => xScale(pointsData[datum].coor[0]))\r\n                                         .y(datum => yScale(pointsData[datum].coor[1]))\r\n                                         ([d.start, d.end])\r\n                             });\r\n                    }\r\n                )\r\n    }, [props.dataset, props.method]);\r\n   \r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <svg id={\"scatterplot\" + props.dataset + props.method}></svg> */}\r\n            <svg\r\n                id={\"ccSvg\"}\r\n                style={{cursor:\"crosshair\"}}\r\n            ></svg>\r\n            <div>\r\n                Cluster Selection: make contour by creating the vertices with mouse clicks.\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Explorer;","import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport Checkviz from './components/Checkviz';\r\nimport Explorer from './components/Explorer';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst App = (props) => {\r\n  const classes = useStyles();\r\n\r\n  // defaults\r\n  let datasetList = [\r\n    \"mnist_pca\",\r\n    \"fmnist_pca\",\r\n    \"kmnist_pca\",\r\n    \"mnist_tsne\",\r\n    \"mnist_umap\",\r\n    \"mnist_isomap\",\r\n  ];\r\n\r\n  // let methodList = [\r\n  //   \"tsne\",\r\n  //   \"umap\",\r\n  //   \"pca\",\r\n  //   \"isomap\",\r\n  // ];\r\n\r\n  let displayModeList = [\r\n    [\"CheckCluster\", \"cc\"],\r\n    [\"CheckViz\", \"cv\"],\r\n    [\"Both\", \"bh\"],\r\n  ]\r\n\r\n  // let method = \"tsne\";\r\n  // let dataset = \"mnist_sampled_2\";\r\n  const isLabel = true;\r\n  const showMissing = true;\r\n  const showFalse = true;\r\n  const radius = 2;\r\n  const stroke = 5;\r\n  const width = 800;\r\n  const height = 800;\r\n\r\n\r\n  // const [method, setMethod] = useState(methodList[0]);\r\n  const [dataset, setDataset] = useState(datasetList[0]);\r\n  const [displayMode, setDisplayMode] = useState(displayModeList[0][1]);\r\n\r\n  useEffect(() => {\r\n    document.title = \"CheckCluster\";\r\n  });\r\n\r\n  return (\r\n    <div id=\"App-wrapper\">\r\n      <div id=\"App-header\">\r\n        <div id=\"App-title\">CheckCluster - Explaining the Cluster Reliability of Multidimensional Projections</div>\r\n      </div>\r\n      <div className=\"App-container\">\r\n        <div className=\"App-sidebar\">\r\n          <div>\r\n            <FormControl variant=\"filled\" className={classes.formControl}>\r\n              <InputLabel htmlFor=\"filled-age-native-simple\">Dataset</InputLabel>\r\n              <Select\r\n                native\r\n                defaultValue={dataset}\r\n                value={dataset}\r\n                onChange={(event) => setDataset(event.target.value)}\r\n                inputProps={{\r\n                  name: 'dataset',\r\n                  id: 'filled-age-native-simple',\r\n                }}\r\n                style={{ width: 180 }}\r\n              >\r\n                {datasetList.map((d, i) => (\r\n                  <option key={i} value={d} >\r\n                    {d}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n              {/* dataset:\r\n            <Select\r\n              id={\"datasetSelection\"}\r\n              value={dataset}\r\n              onChange={(event) => setDataset(event.target.value)}\r\n              style={{ width: \"90px\", fontSize: \"12px\" }}\r\n              native\r\n            >\r\n              {datasetList.map((d, i) => (\r\n                <option key={i} value={d} >\r\n                  {d}\r\n                </option>\r\n              ))}\r\n            </Select> */}\r\n            </FormControl>\r\n          </div>\r\n\r\n          {/* <div>\r\n            <FormControl variant=\"filled\" className={classes.formControl}>\r\n              <InputLabel htmlFor=\"filled-method-native-simple\">Method</InputLabel>\r\n              <Select\r\n                native\r\n                value={method}\r\n                onChange={(event) => setMethod(event.target.value)}\r\n                inputProps={{\r\n                  name: 'method',\r\n                  id: 'filled-method-native-simple',\r\n                }}\r\n                style={{ width: 180 }}\r\n              >\r\n                {methodList.map((d, i) => (\r\n                  <option key={i} value={d} >\r\n                    {d}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div> */}\r\n\r\n          <div>\r\n            <FormControl variant=\"filled\" className={classes.formControl}>\r\n\r\n              <InputLabel htmlFor=\"filled-vis-native-simple\">Visualization</InputLabel>\r\n              <Select\r\n                native\r\n                value={displayMode}\r\n                onChange={(event) => setDisplayMode(event.target.value)}\r\n                inputProps={{\r\n                  name: 'vis',\r\n                  id: 'filled-vis-native-simple',\r\n                }}\r\n                style={{ width: 180 }}\r\n              >\r\n                {displayModeList.map((d, i) => (\r\n                  <option key={i} value={d[1]} >\r\n                    {d[0]}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n\r\n              {/* \r\n            Visualization:\r\n            <Select\r\n              id={\"displayModeSelection\"}\r\n              value={displayMode}\r\n              onChange={(event) => setDisplayMode(event.target.value)}\r\n              style={{ width: \"90px\", fontSize: \"12px\" }}\r\n              native\r\n            >\r\n              {displayModeList.map((d, i) => (\r\n                <option key={i} value={d[1]} >\r\n                  {d[0]}\r\n                </option>\r\n              ))}\r\n            </Select> */}\r\n            </FormControl>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"App-main\">\r\n          <div\r\n            id=\"cc\"\r\n          // style={{\r\n          //   display: ([\"cc\", \"both\"].indexOf(displayMode) > -1 ? \"\" : \"none\")\r\n          // }}\r\n          >\r\n            {[\"cc\", \"bh\"].indexOf(displayMode) > -1 &&\r\n              <Explorer\r\n                // method={method}\r\n                dataset={dataset}\r\n                isLabel={isLabel}\r\n                showMissing={showMissing}\r\n                showFalse={showFalse}\r\n                radius={radius}\r\n                stroke={stroke}\r\n                width={width}\r\n                height={height}\r\n              />\r\n            }\r\n          </div>\r\n          <div id=\"separator\" style={{ width: \"5px\" }}></div>\r\n          <div id=\"cv\">\r\n            {[\"cv\", \"bh\"].indexOf(displayMode) > -1 &&\r\n              <Checkviz\r\n                // method={method}\r\n                dataset={dataset}\r\n                isLabel={isLabel}\r\n                radius={radius}\r\n                width={width}\r\n                height={height}\r\n              />\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken'\r\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","var map = {\n\t\"./fmnist_pca_missing_points.json\": 88,\n\t\"./fmnist_pca_points.json\": 232,\n\t\"./kmnist_pca_missing_points.json\": 89,\n\t\"./kmnist_pca_points.json\": 233,\n\t\"./mnist_isomap_missing_points.json\": 90,\n\t\"./mnist_isomap_points.json\": 234,\n\t\"./mnist_pca_missing_points.json\": 91,\n\t\"./mnist_pca_points.json\": 235,\n\t\"./mnist_tsne_missing_points.json\": 92,\n\t\"./mnist_tsne_points.json\": 236,\n\t\"./mnist_umap_missing_points.json\": 93,\n\t\"./mnist_umap_points.json\": 237\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 87;"],"sourceRoot":""}